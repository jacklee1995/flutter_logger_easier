// Mocks generated by Mockito 5.4.4 from annotations
// in logger_easier/test/logger_easier_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:logger_easier/src/core/log_level.dart' as _i11;
import 'package:logger_easier/src/core/log_record.dart' as _i10;
import 'package:logger_easier/src/error_reporting/error_reporter.dart' as _i8;
import 'package:logger_easier/src/interfaces/abstract_log_filter.dart' as _i4;
import 'package:logger_easier/src/interfaces/abstract_outputer.dart' as _i2;
import 'package:logger_easier/src/interfaces/abstract_log_formatter.dart'
    as _i3;
import 'package:logger_easier/src/interfaces/abstract_log_middleware.dart'
    as _i9;
import 'package:logger_easier/src/performance/performance_monitor.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAbstractOutputer_0 extends _i1.SmartFake
    implements _i2.AbstractOutputer {
  _FakeAbstractOutputer_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLogFormatter_1 extends _i1.SmartFake
    implements _i3.AbstractLogFormatter {
  _FakeLogFormatter_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLogFilter_2 extends _i1.SmartFake implements _i4.AbstractLogFilter {
  _FakeLogFilter_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [PerformanceMonitor].
///
/// See the documentation for Mockito's code generation for more information.
class MockPerformanceMonitor extends _i1.Mock
    implements _i5.PerformanceMonitor {
  MockPerformanceMonitor() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get enableVmServiceMonitoring => (super.noSuchMethod(
        Invocation.getter(#enableVmServiceMonitoring),
        returnValue: false,
      ) as bool);

  @override
  _i6.Future<void> initialize() => (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  Map<String, num> getMetrics() => (super.noSuchMethod(
        Invocation.method(
          #getMetrics,
          [],
        ),
        returnValue: <String, num>{},
      ) as Map<String, num>);

  @override
  void reportMetrics() => super.noSuchMethod(
        Invocation.method(
          #reportMetrics,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void recordStartupPerformance(Duration? startupTime) => super.noSuchMethod(
        Invocation.method(
          #recordStartupPerformance,
          [startupTime],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void recordNetworkRequestPerformance(
    String? endpoint,
    int? responseTime,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #recordNetworkRequestPerformance,
          [
            endpoint,
            responseTime,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void recordDatabaseOperationPerformance(
    String? operation,
    int? executionTime,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #recordDatabaseOperationPerformance,
          [
            operation,
            executionTime,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void recordRenderPerformance(
    String? widgetName,
    int? renderTime,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #recordRenderPerformance,
          [
            widgetName,
            renderTime,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void recordMetric(
    String? name,
    num? value,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #recordMetric,
          [
            name,
            value,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void startTimer(String? operationName) => super.noSuchMethod(
        Invocation.method(
          #startTimer,
          [operationName],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void stopTimer(String? operationName) => super.noSuchMethod(
        Invocation.method(
          #stopTimer,
          [operationName],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void recordEvent(String? eventName) => super.noSuchMethod(
        Invocation.method(
          #recordEvent,
          [eventName],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.Future<void> collectMemoryMetrics() => (super.noSuchMethod(
        Invocation.method(
          #collectMemoryMetrics,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> collectCpuMetrics() => (super.noSuchMethod(
        Invocation.method(
          #collectCpuMetrics,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  void analyzePerformanceBottlenecks() => super.noSuchMethod(
        Invocation.method(
          #analyzePerformanceBottlenecks,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  String generatePerformanceReport() => (super.noSuchMethod(
        Invocation.method(
          #generatePerformanceReport,
          [],
        ),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.method(
            #generatePerformanceReport,
            [],
          ),
        ),
      ) as String);

  @override
  _i6.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
}

/// A class which mocks [ErrorReporter].
///
/// See the documentation for Mockito's code generation for more information.
class MockErrorReporter extends _i1.Mock implements _i8.ErrorReporter {
  MockErrorReporter() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<void> initialize() => (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> reportError(
    dynamic error,
    StackTrace? stackTrace,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #reportError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
}

/// A class which mocks [AbstractLogMiddleware].
///
/// See the documentation for Mockito's code generation for more information.
class MockLogMiddleware extends _i1.Mock implements _i9.AbstractLogMiddleware {
  MockLogMiddleware() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AbstractOutputer get printer => (super.noSuchMethod(
        Invocation.getter(#printer),
        returnValue: _FakeAbstractOutputer_0(
          this,
          Invocation.getter(#printer),
        ),
      ) as _i2.AbstractOutputer);

  @override
  _i3.AbstractLogFormatter get formatter => (super.noSuchMethod(
        Invocation.getter(#formatter),
        returnValue: _FakeLogFormatter_1(
          this,
          Invocation.getter(#formatter),
        ),
      ) as _i3.AbstractLogFormatter);

  @override
  _i4.AbstractLogFilter get filter => (super.noSuchMethod(
        Invocation.getter(#filter),
        returnValue: _FakeLogFilter_2(
          this,
          Invocation.getter(#filter),
        ),
      ) as _i4.AbstractLogFilter);

  @override
  _i6.Future<void> handle(_i10.LogRecord? record) => (super.noSuchMethod(
        Invocation.method(
          #handle,
          [record],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
}

/// A class which mocks [AbstractOutputer].
///
/// See the documentation for Mockito's code generation for more information.
class MockAbstractOutputer extends _i1.Mock implements _i2.AbstractOutputer {
  MockAbstractOutputer() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get name => (super.noSuchMethod(
        Invocation.getter(#name),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.getter(#name),
        ),
      ) as String);

  @override
  Map<String, dynamic> get config => (super.noSuchMethod(
        Invocation.getter(#config),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  List<String> get supportedLevels => (super.noSuchMethod(
        Invocation.getter(#supportedLevels),
        returnValue: <String>[],
      ) as List<String>);

  @override
  String printf(_i10.LogRecord? record) => (super.noSuchMethod(
        Invocation.method(
          #printf,
          [record],
        ),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.method(
            #printf,
            [record],
          ),
        ),
      ) as String);

  @override
  _i6.Future<void> init() => (super.noSuchMethod(
        Invocation.method(
          #init,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> updateConfig(Map<String, dynamic>? newConfig) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateConfig,
          [newConfig],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  void setColorSupport(bool? enabled) => super.noSuchMethod(
        Invocation.method(
          #setColorSupport,
          [enabled],
        ),
        returnValueForMissingStub: null,
      );

  @override
  Map<String, dynamic> getStats() => (super.noSuchMethod(
        Invocation.method(
          #getStats,
          [],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);

  @override
  void resetStats() => super.noSuchMethod(
        Invocation.method(
          #resetStats,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  String formatError(
    dynamic error,
    StackTrace? stackTrace,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #formatError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.method(
            #formatError,
            [
              error,
              stackTrace,
            ],
          ),
        ),
      ) as String);

  @override
  String formatMessage(dynamic message) => (super.noSuchMethod(
        Invocation.method(
          #formatMessage,
          [message],
        ),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.method(
            #formatMessage,
            [message],
          ),
        ),
      ) as String);

  @override
  String getLevelColor(_i11.LogLevel? level) => (super.noSuchMethod(
        Invocation.method(
          #getLevelColor,
          [level],
        ),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.method(
            #getLevelColor,
            [level],
          ),
        ),
      ) as String);

  @override
  String getLevelFgColor(_i11.LogLevel? level) => (super.noSuchMethod(
        Invocation.method(
          #getLevelFgColor,
          [level],
        ),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.method(
            #getLevelFgColor,
            [level],
          ),
        ),
      ) as String);

  @override
  String getLevelBgColor(_i11.LogLevel? level) => (super.noSuchMethod(
        Invocation.method(
          #getLevelBgColor,
          [level],
        ),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.method(
            #getLevelBgColor,
            [level],
          ),
        ),
      ) as String);
}

/// A class which mocks [AbstractLogFormatter].
///
/// See the documentation for Mockito's code generation for more information.
class MockLogFormatter extends _i1.Mock implements _i3.AbstractLogFormatter {
  MockLogFormatter() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get name => (super.noSuchMethod(
        Invocation.getter(#name),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.getter(#name),
        ),
      ) as String);

  @override
  Map<String, dynamic> get config => (super.noSuchMethod(
        Invocation.getter(#config),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);

  @override
  List<String> get supportedPlaceholders => (super.noSuchMethod(
        Invocation.getter(#supportedPlaceholders),
        returnValue: <String>[],
      ) as List<String>);

  @override
  String format(_i10.LogRecord? record) => (super.noSuchMethod(
        Invocation.method(
          #format,
          [record],
        ),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.method(
            #format,
            [record],
          ),
        ),
      ) as String);

  @override
  void updateConfig(Map<String, dynamic>? newConfig) => super.noSuchMethod(
        Invocation.method(
          #updateConfig,
          [newConfig],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.AbstractLogFormatter clone() => (super.noSuchMethod(
        Invocation.method(
          #clone,
          [],
        ),
        returnValue: _FakeLogFormatter_1(
          this,
          Invocation.method(
            #clone,
            [],
          ),
        ),
      ) as _i3.AbstractLogFormatter);

  @override
  bool isValidFormatString(String? formatString) => (super.noSuchMethod(
        Invocation.method(
          #isValidFormatString,
          [formatString],
        ),
        returnValue: false,
      ) as bool);
}

/// A class which mocks [AbstractLogFilter].
///
/// See the documentation for Mockito's code generation for more information.
class MockLogFilter extends _i1.Mock implements _i4.AbstractLogFilter {
  MockLogFilter() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool shouldLog(_i10.LogRecord? record) => (super.noSuchMethod(
        Invocation.method(
          #shouldLog,
          [record],
        ),
        returnValue: false,
      ) as bool);
}
